#pip install python-camellia
import camellia

#by binary analysis
data_key = b"\xEB\x5E\xB3\xCA\x92\xA1\xFF\x01\x80\x4E\x36\x58\x56\xAD\x9E\xB7" 
code_key = b"\xCC\x7C\x3E\xE0\xA5\x62\x42\x62\xEB\x1C\xBD\x84\x4A\xC1\xCF\x51"
server_key = b"\xff\xd3\x30\xb7\x07\x00\x00\x00activate"

data_key = camellia.new(server_key, mode=camellia.MODE_ECB).decrypt(data_key)
code_key = camellia.new(data_key, mode=camellia.MODE_ECB).decrypt(code_key)
data_key = camellia.new(code_key, mode=camellia.MODE_ECB).decrypt(data_key)

print("[+] data_key = {}({})".format(data_key,data_key.hex()))
print("[+] code_key = {}({})".format(code_key,code_key.hex()))


#by binary analysis
with open("./data_enc.o","rb") as f:
    data_enc = f.read()
with open("./code_enc.o","rb") as f:
    code_enc = f.read()

with open("./data.o","wb") as f:
    data = camellia.new(data_key, mode=camellia.MODE_ECB).decrypt(data_enc)
    f.write(data)
with open("./code.o","wb") as f:
    f.write(camellia.new(code_key, mode=camellia.MODE_ECB).decrypt(code_enc))

#by bootstrap analysis
data_decode = data[:0x30] + bytes([byte ^ 0xf4 for byte in data[0x30:0xe0]]) + data[0xe0:]

with open("./data_decode.o","wb") as f:
    f.write(data_decode)

payload = data_decode[0x200:]
#iteration count 1
si = 0xdead
#iteration count 2
di = 0xbeef
#shuffle offset
offset = (si * di) % 0x21
print("[*] shuffle offset : {}".format(offset))

#unshuffle the sector
payload = payload[offset * 512 :] + payload[:offset * 512]

#affine key 1
a = 13
#affine key 2
b = 1

flag = ""
for i in range(0x21):
    flag += chr(payload[512 * i + (a * i + b) % 512])

print("[+] flag : CODEGATE2020{{{}}}".format("".join(flag)))

